import { type NextRequest, NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"

interface RouteParams {
  params: Promise<{ id: string }>
}

export async function GET(request: NextRequest, { params }: RouteParams) {
  try {
    const { id } = await params
    const { searchParams } = new URL(request.url)
    const format = searchParams.get("format") || "markdown"

    const supabase = await createClient()

    // Check authentication
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    // Fetch the summary
    const { data: summary, error: summaryError } = await supabase
      .from("blog_summaries")
      .select("*")
      .eq("id", id)
      .eq("user_id", user.id)
      .single()

    if (summaryError || !summary) {
      return NextResponse.json({ error: "Summary not found" }, { status: 404 })
    }

    if (format === "markdown") {
      const markdownContent = `# ${summary.title}

## Summary
${summary.summary}

## Key Points
${summary.key_points.map((point, index) => `${index + 1}. ${point}`).join("\n")}

## Tags
${summary.tags.map((tag) => `#${tag}`).join(" ")}

---
*Generated by BlogSummarizer on ${new Date(summary.created_at).toLocaleDateString()}*
${summary.original_url ? `\nOriginal Article: ${summary.original_url}` : ""}
`

      return new NextResponse(markdownContent, {
        headers: {
          "Content-Type": "text/markdown",
          "Content-Disposition": `attachment; filename="${summary.title.replace(/[^a-z0-9]/gi, "_").toLowerCase()}.md"`,
        },
      })
    }

    // For PDF, you'd integrate with a PDF generation library
    // For now, return a simple text response
    return NextResponse.json({ error: "PDF export not implemented yet" }, { status: 501 })
  } catch (error) {
    console.error("Export API error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}
